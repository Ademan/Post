/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package postgui;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 *
 * @author Tony
 */
public class GTimePanel extends javax.swing.JPanel {

    /**
     * Creates new form GPanelTime
     */
    public GTimePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCurrentTime = new javax.swing.JLabel();

        lblCurrentTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblCurrentTime, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(lblCurrentTime, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblCurrentTime;
    // End of variables declaration//GEN-END:variables

    private final Thread updateTime = new Thread(new Runnable() {
        @Override
        public void run() {
            while (true) {
                curDT = tf.format(new Date());
                lblCurrentTime.setText(curDT);
                try {
                    Thread.sleep(999);
                } catch (InterruptedException ex) {
                    System.err.printf("Error In Time Update Thread\n", ex.getMessage());
                }

            }
        }
    });

    private final DateFormat tf = new SimpleDateFormat("EEE, MMM-dd-yyyy HH:mm:ss z");
    private String curDT;

    /**
     *
     */
    public void startTimer() {
        this.updateTime.start();
    }

    /**
     *
     */
    public void stopTimer() {
        this.updateTime.interrupt();
    }

}
